#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_connector.ipynb (unless otherwise specified).

__all__ = ['DBConnector']

#Cell

import sys
import os

import time
from pprint import pformat

from io import StringIO
import configparser

import psycopg2
import psycopg2.extras as extras

import pandas as pd


#Cell

from .logtools import *
from .s3funcs import *

#Cell

class DBConnector:
    """
    Object that stores connections to many databases, which are created
    from a .ini file that is passed as an object.
    """
    def __init__(self, config_file, log=StreamLog()):
        self.config = configparser.RawConfigParser()
        self.config.read(config_file)
        self.log = log
        self.active_connections = {}
        # Run func and initialize objects on self
        self._init_database_objects()

    def _init_database_objects(self):
        criteria = ["port", "database", "user", "hostname"]
        # review sections in config for db sections
        for section in self.config.sections():
            n = self.config.options(section)
            # if the section has the criteria, store them
            if set(criteria).issubset(set(n)):
                bkt = {}
                for i in criteria:
                    p = self.config.get(section, i)
                    bkt[i] = p
                # allows db.section referencing
                setattr(
                    self, section.replace("-", ""), DatabaseConnection(bkt, self.log)
                )
                self.active_connections[section] = DatabaseConnection(bkt, self.log)
        # Check if configuration file has proper sections
        if len(self.active_connections) == 0:
            raise Exception(
                """\n
                Configuration file contained no Postgres sections. Please review
                and format like below example :
                    [dev_db]
                    hostname = dev.yourhost.com
                    port = 5432
                    database = dbname
                    user = htpeter

                For additional help, please see documentation
                    https://htpeter.github.io/analytics_toolbox/#Help-With-Postges-Connection-Setup
                """
            )

    def add_file_logger(log_obj: LocalLog):
        self.log = log_obj
        return self

    def close_all_conns(self):
        counter = 0
        conns = []
        for i in self.active_connections.keys():
            adj = i.replace("-", "")
            obj = getattr(self, adj)
            try:
                obj.conn.close()
                conns.append(adj)
                counter += 1
            except Exception as e:
                pass
        print("\n\t Closed {0} connections.\n\t {1} ".format(str(counter), str(conns)))

    def __repr__(self):
        return pformat(self.active_connections, indent=4)

    def __getitem__(self, item):
        return self.active_connections[item]


